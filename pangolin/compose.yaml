networks:
  default:
    name: pangolin

services:
  pangolin:
    container_name: pangolin
    image: fosrl/pangolin:${PANGOLIN_VERSION}
    restart: unless-stopped
    volumes:
      - ./config:/app/config
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/v1/"]
      interval: "3s"
      timeout: "3s"
      retries: 15
    labels:
      ## Traefik
      - traefik.enable=true
      # HTTPS
      - traefik.http.routers.pangolin-api.entryPoints=websecure
      - traefik.http.routers.pangolin-api.rule=Host(`${PANGOLIN_FQDN}`) && PathPrefix(`/api/v1`)
      - traefik.http.routers.pangolin-api.service=pangolin-api
      - traefik.http.routers.pangolin-next.entryPoints=websecure
      - traefik.http.routers.pangolin-next.rule=Host(`${PANGOLIN_FQDN}`)
      - traefik.http.routers.pangolin-next.service=pangolin-next
      # Services
      - traefik.http.services.pangolin-api.loadbalancer.server.port=3000
      - traefik.http.services.pangolin-next.loadbalancer.server.port=3002

  gerbil:
    container_name: gerbil
    image: fosrl/gerbil:${GERBIL_VERSION}
    command:
      - --reachableAt=http://gerbil:3003
      - --generateAndSaveKeyTo=/var/config/gerbil/key
      - --remoteConfig=http://pangolin:3001/api/v1/gerbil/get-config
      - --reportBandwidthTo=http://pangolin:3001/api/v1/gerbil/receive-bandwidth
    restart: unless-stopped
    depends_on:
      pangolin:
        condition: service_healthy
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    ports:
      - 51820:51820/udp
      - 443:443
      - 80:80
    volumes:
      - ./config/:/var/config

  traefik:
    container_name: traefik
    image: traefik:${TRAEFIK_VERSION}
    command:
      ## Global
      - --log.level=INFO
      - --log.format=common
      - --api.dashboard=${TRAEFIK_ENABLE_DASHBOARD:-false}
      ## Providers
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false
      - --providers.http.endpoint=http://pangolin:3001/api/v1/traefik-config
      - --providers.http.pollInterval=5s
      ## Plugins
      - --experimental.plugins.badger.modulename=github.com/fosrl/badger
      - --experimental.plugins.badger.version=${BADGER_VERSION}
      ## Entrypoints
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entryPoints.websecure.transport.respondingTimeouts.readTimeout=30m
      # We ask Let's Encrypt to generate certificates for our root domain and wildcard subdomains
      - --entrypoints.websecure.http.tls.domains[0].main=${ROOT_FQDN}
      - --entrypoints.websecure.http.tls.domains[0].sans=*.${ROOT_FQDN}
      # We redirect all HTTP traffic to HTTPS
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      # We enable TLS for all HTTPS traffic
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http.tls.certresolver=letsencrypt
      ## Certificates
      # Uncomment next line when testing
      # - --certificatesResolvers.letsencrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_ACME_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=${TRAEFIK_ACME_DNS_PROVIDER}
    restart: unless-stopped
    depends_on:
      pangolin:
        condition: service_healthy
    env_file:
      - ./traefik.env
    network_mode: service:gerbil
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/letsencrypt:/letsencrypt
